<%@ page language="java" contentType="text/html; charset=EUC-KR"
    pageEncoding="EUC-KR"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="EUC-KR">
<title>Insert title here</title>
</head>
<body>
	<h1>JSP 페이지</h1>
	-JSP 기본 다루기
	:인터넷을 사용하는 사용자에게 정보를 제공하기 위해서는 HTML 태그를 사용하여 웹 브라우저 내에 정보를 표시하는데
	JSP에서는 이러한 HTML 태그를 사용할 수 있어 웹 어플리케이션의 프레젠테이션(View의 역할) 역할을 한다.
	JSP는 JSP에서만 사용 가능한 다양한 태그(예를 들면 스크립트릿과 같은 것)을 이용하여 쉽게 웹 프로그래밍을
	할 수 있도록 한다.
	
	컨텍스트 패스는 여러 개의 웹 어플리케이션이 WAS에서 동작할 경우 이를 구분하기 위해서 사용한다.
	이클립스가 자동으로 만들어주는 컨텍스트 패스는 프로젝트 이름과 동일하다.
	다음은 JSP를 요청하기 위한 URL이다.(http://localhost:8080/webapp/jspEx/Ex1.jsp) (컥텍스트 패스 - webapp)
	프로젝트 생성시 입력하는 프로젝트 이름은 개발자 입장에서 개발을 위해서 생성된 파일들을 관리하기 위한 폴더이고
	컨텍스트 패스는 사용자가 해당 웹 어플리케이션을 사용하기 위해서 접근하는 경로가 된다.
	경우에 따라서는 개발자는 컨텍스트 패스 이름을 웹 프로젝트 이름과는 다른 이름으로 바꿀 수 있다. 

	JSP는 Java Server Page의 약어로서 HTML 태그에 자바로 프로그래밍하여 브라우저에 보여주는 특별한 페이지이다.
	아래와 같이 HTML 태그 사이에 <% %>를 추가하려면 이는 JSP 파일로 작성해야 한다.
	반면 JSP 파일은 HTML파일과는 다르게 동작한다.
	HTML 파일은 확장자가 html이고 이는 웹브라우저 내의 번역기가 들리는 반면 JSP 파일은 톰캣 서버가 번역하여
	그 결과를 HTML 태그로 변환한 후 웹 브라우저에 내려 보낸다.
	
	<%-- 예문) HTML 태그 사이에 <% %>를 추가  
	<html>
		<body>
			<% 
				int su1 = 20;
				int su2 = 10;
				int sum = su1 + su2;
				out.println( su1 + " + " + su2 + " = " + sum);
			 %>
		</body>
	</html>		 
	--%>
	웹 컨테이너는 <% %>부분(스크립트릿)을 JSP로 인식하여 이를 해석한 후 HTML 형태로 변환.
	
	-JSP의 처리 과정(서블릿과 JSP)
	JSP로 만들어진 예제를 보면 결과물로 놓고 보았을 때 서블릿과 별반 다른 일을 하지 않는다.
	서블릿과 JSP가 같은 일을 하기 위해 등장한 도구라면 왜 서블릿과 JSP가 둘 다 존재할까.
	자바 기반으로 웹 애플리케이션을 작성하기 위한 도구로 서블릿이 먼저 만들어짐.
	하지만 서블릿은 HTML 코드가 자바 코드 안에 들어가는 구조이다.
	디자이너가 자바를 이해하지 못한 채 HTML 코드를 자바 형태인 서블릿에서 작성한다는 것은 거의 불가능한 일이다.
	이러한 문제점 때문에 등장한 것이 JSP이다. (HTML, CSS 디자이너 접근가능 영역, JAVA접근 불가 -> 개발자가 HTML, CSS 이해 수준에서 JAVA코드 삽입)
	JSP는 HTML문서에 자바 코드가 들어가는 구조이기 때문에 서블릿보다는 JSP로 개발하는 편이 훨씬 쉽고 간단하다.
	
	JSP는 서블릿보다 간편하게 웹 어플리케이션을 개발하기 위해서 등장한 것이기 때문에
	웹 컨테이너는 JSP를 있는 그대로 받아들이지 못하고 이를 서블릿으로 변환한 후에 동작한다.

	[처리과정]				
	개발자가 JSP를 작성하면  -> MyJSP.jsp파일을 만들고 -> 웹 컨테이너가 서블릿으로 변환한다 -> MyJSP_jsp.java 클래스 파일로 변환한다. 
	
	웹 컨테이너가 만든 서블릿은 다음 경로에서 찾을 수 있다.
	C:\Eclipse-jee\.metadata\.plugins\org.eclipse.wst.server.core
	\tmp0\work\Catalina\localhost\webapp\org\apache\jsp\jspEx
	
	[웹 컨테이너가 JSP를 변환하여 만들어 낸 서블릿 코드 순서]
	
	HttpJspBase의 하위 클래스를 생성 -> 요청에 대해 응답하는 _jspService()-(getter,setter역할)를 만든다. -> JSP를 작성할 때 쓰는 out과 request와 같은 내장 객체를 선언한다. ->
	
	내장 객체를 생성한다. -> JSP에 있는 HTML코드, 스크립트릿을 출력 스트림 out의 출력 메소드로 출력한다.
	
	
	[JSP 기본 태그]
	-HTML이나 자바스크립트에 의해 작성된 페이지들은 그 페이지를 사용하는 사용자와 상관없이 항상 동일한 내용만을 제공해주는 
	정적 페이지이다. 하지만 웹 프로그램들은 사용자에 따라 서로 다른 내용이 제공되어야 하는데 이러한 동적 페이지를
	구현하기 위해서는 다음과 같이 JSP태그를 사용해야 한다.
	
	스크립트릿 - 자바 코드를 기술 - <% %>
	선언 - 변수와 메소드를 선언함 - <%! %>
	표현식 - 계산식이나 함수를 호출한 결과를 문자열 형태로 출력함 - <%= %>
	주석 - JSP페이지에 설명을 넣음 - <%-- --%>
	지시자 - JSP페이지의 속성을 지정함 <%@ %>
	
	JSP 페이지에서는 자바를 사용하려면 특정 태그에 기술해야 한다.
	이러한 기능을 제공하는 JSP 스크립트 요소들은 서버가 인식하는 JSP 태그 중 
	스크립트릿, 선언문, 표현식 3가지가 있다.
	
	[스크립트릿(scriptlet)] : 자바 코드를 구현
	
	<% 
		int su1 = 20;
		int su2 = 10;
		int sum = su1 + su2;
		out.println(su1 +  " + " + su2 + " = " + sum);
		
	%>
	
	[선언문(declaration)] : 변수 선언 및 메소드를 정의
	
	<%! 
		String str = "Hello JSP";
		int su1 = 5, su2 =7;
	
		public int method(){
			return su1 + su2;
		}
	%> 
	
	[표현식(expression)] : 문자열 출력 한다. <% out.println("msg"); %>
	
	<%-- 
		<%= 변수 %>
		<%= 수식%>
		<%= 메소드 호출%>
		
		*주의*
		<%= 변수, %> 개발자가 작성한 표현식을 (; 사용하지 않음)
		웹 컨테이너가 out.println()으로 변환시킴
		out.println(a ;); <- 컴파일 오류남.
	--%>

</body>
</html>